Expression_for_v1 {
  Expression
    = TernaryExpression
    | BinaryExpression
    | MemberExpression

  PrimaryExpression
    = ParenthesizedExpression
    | CallExpression
    | UnaryExpression
    | identifier
    | literal
    | DereferenceExpressions

  ParenthesizedExpression = "(" Expression ")"
  DereferenceExpressions = (#(identifier) | DereferenceExpression)+
  DereferenceExpression = #("%" identifier "%")
  UnaryExpression
    = "+" PrimaryExpression -- positive
    | "-" PrimaryExpression -- negative
    | "!" PrimaryExpression -- not
    | "&" ~"&" PrimaryExpression -- address
    | "~" PrimaryExpression -- bitwise_not
    | PrefixUnaryExpression

  PrefixUnaryExpression
    = "++" PrimaryExpression -- increment
    | "--" PrimaryExpression -- decrement
    | PostfixUnaryExpression

  PostfixUnaryExpression
    = Expression "++"
    | Expression "--"

  TernaryExpression
    = Expression "?" Expression ":" Expression

  BinaryExpression
    = LogicalExpression
  LogicalExpression
    = LogicalExpression "||" EqualityExpression -- or
    | LogicalExpression "&&" EqualityExpression -- and
    | EqualityExpression
  EqualityExpression
    = EqualityExpression "=" RelationalExpression -- loose_equal
    | EqualityExpression "==" RelationalExpression -- equal
    | EqualityExpression "!=" RelationalExpression -- not_loose_equal
    | EqualityExpression "!==" RelationalExpression -- not_equal
    | RelationalExpression
  RelationalExpression
    = RelationalExpression "<" RegExMatchExpression -- lessthan
    | RelationalExpression "<=" RegExMatchExpression -- lessthan_equal
    | RelationalExpression ">" RegExMatchExpression -- greaterthan
    | RelationalExpression ">=" RegExMatchExpression -- greaterthan_equal
    | RegExMatchExpression
  RegExMatchExpression
    = RegExMatchExpression "~=" ConcatenateExpression -- regex_match
    | ConcatenateExpression
  ConcatenateExpression
    = ConcatenateExpression #(whitespace) BitwiseExpression -- space
    | ConcatenateExpression "." BitwiseExpression -- dot
    | BitwiseExpression
  BitwiseExpression
    = BitwiseExpression "|" ~"|" AdditiveExpression -- or
    | BitwiseExpression "^" AdditiveExpression -- xor
    | BitwiseExpression "&" ~"&" AdditiveExpression -- and
    | AdditiveExpression
  AdditiveExpression
    = AdditiveExpression "+" MultiplicativeExpression -- addition
    | AdditiveExpression "-" MultiplicativeExpression -- subtraction
    | MultiplicativeExpression
  MultiplicativeExpression
    = MultiplicativeExpression "*" MultiplicativeExpression -- multiplication
    | MultiplicativeExpression "/" MultiplicativeExpression -- division
    | MultiplicativeExpression "//" MultiplicativeExpression -- floor_division
    | ExponentiationExpression
  ExponentiationExpression
    = ExponentiationExpression "**" MemberExpression -- power
    | MemberExpression

  Arguments = ListOf<Expression, ",">

  MemberExpression
    = MemberExpression "." #(identifier) -- propertyaccess
    | MemberExpression #(whitespace* "[") Arguments "]" -- elementaccess
    | PrimaryExpression
  CallExpression = MemberExpression "(" Arguments ")"

  whitespace = " " | "\t"
  lineTerminator
    = "\r\n"
    | "\n"

  identifier = identifierStart identifierPart*
  identifierStart = letter | "_" | "$" | "@" | "#"
  identifierPart = identifierStart | digit

  literal
    = thisLiteral
    | stringLiteral
    | numericLiteral
    | booleanLiteral

  thisLiteral = "this"

  booleanLiteral = ("true" | "false")

  stringLiteral = "\"" doubleCharacter* "\""
  commonEscapeSequence = "``" | "`," | "`%" | "`;" | "`::" | "`r" | "`n" | "`b" | "`t" | "`v" | "`a" | "`f"
  doubleEscapeSequence = "\"\"" | commonEscapeSequence
  doubleCharacter
    = ~("\"" | "`" | lineTerminator) any
    | doubleEscapeSequence

  numericLiteral = "0" | decimalLiteral | hexIntegerLiteral
  digitWithoutZero = "1".."9"
  decimalLiteral = decimalIntegerLiteral
  decimalIntegerLiteral = digitWithoutZero digit*
  hexIntegerLiteral = "0x" hexDigit+
                    | "0X" hexDigit+
}