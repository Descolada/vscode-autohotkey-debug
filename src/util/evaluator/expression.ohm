Expression_for_v1 {
  Expression
    = TernaryExpression
    | BinaryExpression
    | MemberExpression

  PrimaryExpression
    = ParenthesizedExpression
    | CallExpression
    | UnaryExpression
    | identifier
    | literal

  ParenthesizedExpression = "(" Expression ")"
  UnaryExpression
    = "+" PrimaryExpression -- positive
    | "-" PrimaryExpression -- negative
    | "!" PrimaryExpression -- not
    | "&" PrimaryExpression -- address
    | PrefixUnaryExpression

  PrefixUnaryExpression
    = "++" PrimaryExpression -- increment
    | "--" PrimaryExpression -- decrement
    | PostfixUnaryExpression

  PostfixUnaryExpression
    = Expression "++"
    | Expression "--"

  TernaryExpression
    = Expression "?" Expression ":" Expression

  BinaryExpression
    = AdditiveExpression
  AdditiveExpression
    = AdditiveExpression "+" MultiplicativeExpression -- addition
    | AdditiveExpression "-" MultiplicativeExpression -- subtraction
    | MultiplicativeExpression
  MultiplicativeExpression
    = MultiplicativeExpression "*" MemberExpression -- multiplication
    | MultiplicativeExpression "/" MemberExpression -- division
    | MemberExpression

  Arguments = ListOf<Expression, ",">

  MemberExpression
    = MemberExpression "." ~space identifier -- propertyaccess
    | MemberExpression ~space "[" Arguments "]" -- elementaccess
    | PrimaryExpression
  CallExpression = MemberExpression "(" Arguments ")"

  whitespace
    = space
    | lineTerminator
  lineTerminator
    = "\r\n"
    | "\n"

  identifier = identifierStart identifierPart*
  identifierStart = letter | "_" | "$" | "@" | "#"
  identifierPart = identifierStart | digit

  literal
    = thisLiteral
    | stringLiteral
    | numericLiteral
    | booleanLiteral

  thisLiteral = "this"

  booleanLiteral = ("true" | "false")

  stringLiteral = "\"" doubleCharacter* "\""
  doubleEscapeSequence = "`," | "`%" | "`;" | "`::" | "`r" | "`n" | "`b" | "`t" | "`v" | "`a" | "`f"
  doubleCharacter
    = ~("\"" | "`" | lineTerminator) any
    | doubleEscapeSequence

  numericLiteral = decimalLiteral | hexIntegerLiteral
  digitWithoutZero = "1".."9"
  decimalLiteral = decimalIntegerLiteral
  decimalIntegerLiteral = digitWithoutZero digit*
  hexIntegerLiteral = "0x" hexDigit+
                    | "0X" hexDigit+
}