#SingleInstance
#Warn All, StdOut
#Include ./lib/SafeCall.ahk2

testResults := Map()

; #region Predicate functions
for i, funcName in [ "IsInteger", "IsFloat", "IsNumber" ] {
  testResults[funcName . '("abc")'] := %funcName%("abc")
  testResults[funcName . '("ABC")'] := %funcName%("ABC")
  testResults[funcName . '("abcABC")'] := %funcName%("abcABC")
  testResults[funcName . '(" ")'] := %funcName%(" ")
  testResults[funcName . '(123)'] := %funcName%(123)
  testResults[funcName . '("123")'] := %funcName%("123")
  testResults[funcName . '(-123)'] := %funcName%(-123)
  testResults[funcName . '("-123")'] := %funcName%("-123")
  testResults[funcName . '(123.456)'] := %funcName%(123.456)
  testResults[funcName . '("123.456")'] := %funcName%("123.456")
  testResults[funcName . '(-123.456)'] := %funcName%(-123.456)
  testResults[funcName . '("-123.456")'] := %funcName%("-123.456")
  testResults[funcName . '(0x123)'] := %funcName%(0x123)
  testResults[funcName . '("0x123")'] := %funcName%("0x123")
  testResults[funcName . '(-0x123)'] := %funcName%(-0x123)
  testResults[funcName . '("-0x123")'] := %funcName%("-0x123")
}
; #endregion Predicate functions

ExitApp